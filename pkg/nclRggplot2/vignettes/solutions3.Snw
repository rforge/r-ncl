%\VignetteIndexEntry{practical3}
%!Snw weave = knitr
%\VignetteEngine{knitr::knitr}
\documentclass[a4paper,justified,openany]{tufte-handout}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
options(replace.assign=FALSE,width=50)

opts_chunk$set(fig.path='figure/graphics-', 
               cache.path='cache/graphics-', 
               fig.align='center', 
               dev='pdf', fig.width=5, fig.height=5, 
               fig.show='hold', cache=FALSE, par=TRUE)
knit_hooks$set(crop=hook_pdfcrop)

knit_hooks$set(par=function(before, options, envir){
    if (before && options$fig.show!='none') {
        par(mar=c(3,3,2,1),cex.lab=.95,cex.axis=.9,
            mgp=c(2,.7,0),tcl=-.01, las=1)
}}, crop=hook_pdfcrop)
@
<<echo=FALSE>>=
#knit_theme$set("bw.css")
@


%\geometry{showframe}% for debugging purposes -- displays the margins

\usepackage{amsmath}

% Set up the images/graphics package
\usepackage{graphicx}
\setkeys{Gin}{width=\linewidth,totalheight=\textheight,keepaspectratio}
\graphicspath{{graphics/}}

\title{ggplot2: practical 3 solutions} 
\author[Dr Colin Gillespie]{Dr Colin Gillespie}
\date{}  % if the \date{} command is left out, the current date will be used

% The following package makes prettier tables.  We're all about the bling!
\usepackage{booktabs}

% The units package provides nice, non-stacked fractions and better spacing
% for units.
\usepackage{units}

% The fancyvrb package lets us customize the formatting of verbatim
% environments.  We use a slightly smaller font.
\usepackage{fancyvrb}
\fvset{fontsize=\normalsize}
\newcommand{\cc}{\texttt}
\graphicspath{{../graphics/}}
\setcounter{secnumdepth}{2}

\usepackage{microtype}

\begin{document}
\maketitle% this prints the handout title, author, and date

\begin{abstract}
  \noindent This practical aims to guide you through some of the key ideas in
  data manipulation. I've tried to construct this practical in such a way that
  you get to experiment with the various tools. Feel free to experiment!
\end{abstract}
<<echo=FALSE>>=
library(nclRggplot2)
data(aphids)
@

\section{Factors}

When using ggplot2, the easiest way of rearranging the graph or to alter labels
is to manipulate the data set. Consider the \cc{mpg} data set:

<<>>=
library(ggplot2)
data(mpg)
@ 

Suppose we generate a scatter plot of engine displacement against highway mpg.

<<tidy=FALSE>>=
g = ggplot(data=mpg, aes(x=displ, y=hwy)) + 
  geom_point()
@ 

\noindent Next, we add a loess line, conditional on the drive type:

<<fig.keep='none', message=FALSE>>=
g + stat_smooth(aes(colour=drv))
@ 

\noindent While this graph is suitable for exploring the data; for publication,
we would like to rename the axis and legend labels. To change the axis labels,
we can rename the data frame columns or use \cc{xlab} and \cc{ylab}. To change
the order of the legend, we need to manipulate the data. If we try:

<<eval=FALSE>>=
mpg[mpg$drv == "4",]$drv = "4wd"
mpg[mpg$drv == "f",]$drv = "Front"
mpg[mpg$drv == "r",]$drv = "Rear"
@ 

\noindent we get an error message. This is because \cc{mpg\$drv} is a
\textit{factor}.\sidenote{See my introduction to R notes.} Instead, we use the \cc{levels} function to change the levels: 

<<>>=
##Reload the data just to make sure
data(mpg)
levels(mpg$drv) = c("4wd", "Front", "Rear")
@
\noindent To change the order of the, we need to use the \cc{factor} function:
<<tidy=FALSE>>=
mpg$drv = factor(mpg$drv, 
                 levels = c("Front", "Rear", "4wd"))
@ 

\noindent The legend now displays the labels in the order: \cc{Front}, \cc{Rear} and \cc{4wd}.




\begin{figure}[t]
\centering
<<F1, echo=FALSE, cache=TRUE, fig.width="\\textwidth">>=
aphids$Block = factor(aphids$Block)
aphids$Water = factor(aphids$Water, 
                      levels=c("Low", "Medium", "High"))
ga = ggplot(data=aphids) + 
  geom_point(aes(Time, Aphids, colour=Block)) +
  facet_grid(Nitrogen ~ Water) + 
  geom_line(aes(Time, Aphids, colour=Block)) + 
  theme_bw()

print(ga)
@ 
\caption{Final figure from section 2.}\label{F1}
\end{figure}

\section{Aphids}

This data set consists of five observations on cotton aphid counts on twenty
randomly chosen leaves in each plot, for twenty-seven treatment-block
combinations. The data were recorded in July 2004 in Lamesa, Texas. The
treatments consisted of three nitrogen levels (blanket, variable and none),
three irrigation levels (low, medium and high) and three blocks, each being a
distinct area. Irrigation treatments were randomly assigned within each block as
whole plots. Nitrogen treatments were randomly assigned within each whole block
as split plots.

<<cache=TRUE, results='hide'>>=
library(nclRggplot2)
data(aphids)
@ 

\noindent Note that the sampling times are $t=0$, 1.14, 2.29, 3.57 and 4.57
weeks (i.e. every 7 to 8 days). Reproduce figure \ref{F1}. 

Here are some hints to get you started. The key idea is to think of the plot in terms of layers. So
\begin{itemize}
\item Leave the ordering of factors to the end
\item The plot contains a combination of \cc{geom\_line} and \cc{geom\_point}. 
\item You can change the x-axis label using 
<<eval=FALSE, tidy=FALSE>>=
 + xlab("Time")
@
\item Change the theme using \cc{theme\_bw()}
\end{itemize}
\newpage
<<fig.keep='none', tidy=FALSE>>=
##Code for figure 1
<<F1>>
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Section 3
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{The Beauty data set}

First load the beauty data set
<<>>=
data(Beauty)
@

\noindent In practical 1, we split data up by both gender and age:

<<fig.keep='none'>>=
Beauty$dec = signif(Beauty$age, 1)
g = ggplot(data=Beauty)
g1 = g + geom_bar(aes(x=gender, fill=factor(dec)))
@ 

\begin{marginfigure}
\centering
<<echo=FALSE, fig.width="\\textwidth">>=
g1
@
\caption{Stacked bar chart of the Beauty data set.}\label{F2}
\end{marginfigure}

\noindent to get figure \ref{F2}. Rather than using the \cc{fill} aesthetic, redo the plot but use
\cc{facet\_grid} and \cc{facet\_wrap}. For example, 

<<fig.keep='none'>>=
g2 = g + geom_bar(aes(x=gender)) + 
  facet_grid(. ~ dec)
@ 

\noindent Experiment with:
\begin{itemize}
\item \cc{margins};
<< fig.keep='none'>>=
g + geom_bar(aes(x=gender)) + facet_grid(. ~ dec, margins=TRUE)
@

\item \cc{scales=`free\_y'}
<<fig.keep='none'>>=
## Notice that the females have disappeared from the "70" facet.
## Probably not what we wanted.
g + geom_bar(aes(x=gender)) + facet_grid(. ~ dec, scales="free_x")
@
\item layout, i.e. column or row.
<<fig.keep='none'>>=
g + geom_bar(aes(x=gender)) + facet_grid(dec ~.)
@
\end{itemize}
How would you change the panel labels?
<<fig.keep='none'>>=
##Relabel the factor
Beauty$dec = factor(Beauty$dec, 
                    labels=c("Thirties", "Forties", "Fifties", "Sixties", "Seventies"))

## Plot as before
ggplot(data=Beauty) + 
  geom_bar(aes(x=gender)) + 
  facet_grid(dec ~.)
@








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Section 4
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{The Google data set}

<<F3,echo=FALSE>>=
data(google)
g = ggplot(google) + 
  geom_point(aes(Rank, Users), alpha=0.2) +
  scale_y_log10(limit=c(1e0, 1e9))  + 
  facet_grid(Advertising~.) + 
  geom_point(data=subset(google, Category=="Social Networks"), 
             aes(Rank, Users), colour="Red",  size=2)
@ 

Google recently released a data set of the top 1000 websites. The data set
contains the following categories: \cc{Rank}, \cc{Site}, \cc{Category},
\cc{Users}, \cc{Views} and \cc{Advertising}. First we load the data

<<cache=TRUE>>=
data(google)
@ 

\noindent Next, we perform a quick sanity check:

<<>>=
dim(google)
@ 

\begin{marginfigure}
\centering
<<echo=FALSE, width="\\textwidth">>=
g
@
\caption{The google data set.}\label{F3}
\end{marginfigure}
\begin{enumerate}
\item Create a scatter of plot of \cc{Rank} and \cc{Views}.
\item Using \cc{scale\_y\_log10()} transform the \cc{y} scale.
\item Uses facets to split the plot by its advertising status.
\item Use another \cc{geom\_point()} layer to highlight the \textit{Social
    Networks} sites to figure \ref{F3}.
\end{enumerate}


<<echo=-1,tidy=FALSE>>=
<<F3>>
@ 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
%Section 5
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
\section{An example data set}

An experiment was conducted: two treatments, \cc{A} and \cc{B}, were tested. The data can be downloaded into R using the following commands:
<<cache=TRUE>>=
data(treats)
@
\noindent Within each treatment group, there are two patient types: \cc{Case} and
\cc{Control}. What plot do you think would be most suitable for this data?

First we'll create a base object


<<>>=
##This doesn't plot anything
g = ggplot(treats, aes(treatment, values)) + 
  facet_grid(.~type)
@ 

\begin{itemize}
\item Try boxplots, jittered points, histograms, errors, etc.

It's very easy to try a variety of options. For example, we could use a
\cc{boxplot}:

<<fig.width="0.8\\textwidth">>=
g + geom_boxplot() 
@ 

Or a dotplot

<<message=FALSE,fig.width="0.8\\textwidth">>=
g + geom_dotplot(binaxis="y", stackdir="center",
                 colour="blue", fill="blue")
@ 

\newpage
or plain (jittered) points

<<fig.width="0.8\\textwidth">>=
g + geom_jitter()
@ 

Of course, we can have multiple layers. Here we have dotplots with errorbars:

<<fig.width="0.8\\textwidth", message=FALSE, tidy=FALSE>>=
g +  geom_dotplot(binaxis="y", stackdir="center",
                  colour="blue", fill="blue") + 
  stat_summary(geom="errorbar", 
               fun.ymin=min, fun.ymax=max, fun.y=mean, 
               width=0.2) 

@ 


\item Would facets be useful? \textbf{Yes}
\end{itemize}





\end{document}
