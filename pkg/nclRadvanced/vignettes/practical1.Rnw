%\VignetteIndexEntry{practical1}
%!Snw weave = knitr
%\VignetteEngine{knitr::knitr}

\documentclass[a4paper,justified,openany]{tufte-handout}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
library(methods)
options(replace.assign=FALSE,width=40)

opts_chunk$set(fig.path='knitr_figure/graphics-', 
               cache.path='knitr_cache/graphics-', 
               fig.align='center', 
               dev='pdf', fig.width=5, fig.height=5, 
               fig.show='hold', cache=FALSE, par=TRUE)
knit_hooks$set(crop=hook_pdfcrop)

knit_hooks$set(par=function(before, options, envir){
    if (before && options$fig.show!='none') {
        par(mar=c(3,3,2,1),cex.lab=.95,cex.axis=.9,
            mgp=c(2,.7,0),tcl=-.01, las=1)
}}, crop=hook_pdfcrop)
@


<<echo=FALSE>>=
##Get this file name
x = get("con", envir=sys.frame(1))
fname = summary(x)$description
show = grepl("solutions", fname)
@


\usepackage{amsmath}

% Set up the images/graphics package
\usepackage{graphicx}
\setkeys{Gin}{width=\linewidth,totalheight=\textheight,keepaspectratio}
\graphicspath{{graphics/}}

\title{Advanced R programming: \Sexpr{ifelse(show, "solutions","practical")} 1} 
\author[Dr Colin Gillespie]{Dr Colin Gillespie}
%\date{}  % if the \date{} command is left out, the current date will be used

\usepackage{booktabs}

% The units package provides nice, non-stacked fractions and better spacing
% for units.
\usepackage{units}

% The fancyvrb package lets us customize the formatting of verbatim
% environments.  We use a slightly smaller font.
\usepackage{fancyvrb}
\fvset{fontsize=\normalsize}
\newcommand{\cc}{\texttt}
\graphicspath{{../graphics/}}
\setcounter{secnumdepth}{2}
\usepackage{microtype}
\begin{document}

\maketitle% this prints the handout title, author, and date



\section{Argument matching}

R allows a variety of ways to match function arguments.\sidenote{For example, by position, by complete name, or by partial name.} We didn't cover argument matching in the lecture, so let's try and figure out the rules from the examples below. First we'll create a little function to help 

<<tidy=FALSE>>=
arg_explore = function(arg1, rg2, rg3)
    paste("a1, a2, a3 = ", arg1, rg2, rg3)
@

\noindent Next we'll create a few examples. Try and predict what's going to happen before calling the functions\marginnote{One of these examples will raise an error - why?}

<<eval=FALSE >>=
arg_explore(1, 2, 3)
arg_explore(2, 3, arg1 = 1)
arg_explore(2, 3, a = 1)
arg_explore(1, 3, rg = 1)
@

\noindent Can you write down a set of rules that R uses when matching arguments?

<<echo=show, tidy=FALSE>>=
## SOLUTION
## See http://goo.gl/NKsved for the offical document
## To summeriase, matching happens in a three stage pass:
#1. Exact matching on tags 
#2. Partial matching on tags. 
#3. Positional matching
@

\noindent Following on from the above example, can you predict what will happen with 

<<fig.keep="none">>=
plot(type="l", 1:10, 11:20)
@

\noindent and

<<results='hide'>>=
rnorm(mean=4, 4, n=5)
@

<<echo=show, tidy=FALSE, results='hide', fig.keep='none'>>=
## SOLUTION
#plot(type="l", 1:10, 11:20) is equivilent to
plot(x=1:10, y=11:20, type="l")
#rnorm(mean=4, 4, n=5) is equivilent to
rnorm(n=5, mean=4, sd=4)
@


\section{The \cc{...} argument}

A common argument\sidenote{Especially when dealing with S3 objects and functions.} is \texttt{...}. We can explore what happens using the \cc{eval} and \cc{substitute} functions.

<<tidy=FALSE>>=
arg_explore2 = function(arg1 = 5, ...) 
    eval(substitute(alist(...)))
@

\begin{itemize}
\item What do \cc{alist}, \cc{substitute} and \cc{eval} do?\sidenote{Hint: the easiest way to figure this out is to alter the \cc{arg\_explore2} function, i.e. remove \cc{eval}, then remove \cc{substitute}, etc.}
<<echo=show, tidy=FALSE>>=
## SOLUTION
#1. eval - just evalulats an R expression
#2. substritute - returns the unevaluated expression
#3. alist - Used to parse the arguments
#Look at ?alist, ?eval and ?substitute
#Also, run the examples - example(eval)
@

\item Repeat the examples used in \cc{arg\_explore}, but include the \cc{...} argument.
\end{itemize}

\section{Variable scope}

Scoping can get tricky. \textbf{Before} running the example code below, predict what is going to happen
\begin{enumerate}
\item A simple one to get started
<<results='hide'>>=
f = function(x) return(x + 1)
f(10)
@
<<echo=show, tidy=FALSE>>=
##Nothing strange here. We just get 
f(10)
@
\item A bit more tricky
<<results='hide'>>=
f = function(x) {
  f = function(x) {
    x + 1
  }
  x = x + 1
  return(f(x))
}
f(10)
@
\item More complex
<<results='hide'>>=
f = function(x) {
  f = function(x) {
    f = function(x) {
      x + 1
    }
    x = x + 1
    return(f(x))
  }
  x = x + 1
  return(f(x))
}
f(10)
@

<<echo=show, results='hide', message=show>>=
##Solution: The easiest way to understand is to use print statements
f = function(x) {
  f = function(x) {
    f = function(x) {
      message("f1: = ", x)
      x + 1
    }
    message("f2: = ", x)
    x = x + 1
    return(f(x))
  }
  message("f3: = ", x)
  x = x + 1
  return(f(x))
}
f(10)
@


\item 
<<results='hide'>>=
f = function(x) {
  f = function(x) {
    x = 100
    f = function(x) {
      x + 1
    }
    x = x + 1
    return(f(x))
  }
  x = x + 1
  return(f(x))
}
f(10)
@

<<echo=show, results='hide'>>=
##Solution: The easiest way to understand is to use print statements as above
@
\end{enumerate}


\section{Function closures}

Following the examples in the notes, where we created a function closure for the normal and uniform distributions. Create a similar closure for
\begin{itemize}
\item the Poisson distribution,
<<echo=show>>=
poisson = function(lambda) {
     r = function(n=1) rpois(n, lambda)
     d = function(x, log=FALSE) dpois(x, lambda, log=log)
     return(list(r=r, d=d))
}
@ 
\item and the Geometric distribution.
<<echo=show>>=
geometric = function(prob) {
     r = function(n=1) rgeom(n, prob)
     d = function(x, log=FALSE) dgeom(x, prob, log=log)
     return(list(r=r, d=d))
}
@ 

\end{itemize}

<<randu,echo=FALSE, results="hide">>=
##Solutions
randu = function(seed) {
  state = seed
  calls = 0 #Store the number of calls
  r = function() {
    state <<- (65539*state) %% 2^31
    ## Update the variable outside of this enviroment
    calls <<- calls + 1
    state/2^31
  }
  set_state = function(initial) state <<- initial
  get_state = function() state
  get_seed = function() seed
  get_num_calls = function() calls
  list(r=r, set_state=set_state, get_state=get_state, 
       get_seed = get_seed, get_num_calls=get_num_calls)
}
r = randu(10)
r$r()
r$get_state()
r$get_seed()
@


\section{Mutable states}

In chapter 2, we created a random number generator where the \cc{state}, was stored between function calls. 
\begin{itemize}
\item Reproduce the \cc{randu} generator from the notes and make sure that it works as advertised.
\item When we initialise the random number generator, the very first state is called the \cc{seed}. Store this variable and create a new function called \cc{get\_seed} that will return the initial seed, i.e.
<<>>=
r = randu(10)
r$r()
r$get_state()
r$get_seed()
@
<<echo=show>>=
##Solutions - see below
@
\item Create a variable that stores the number of times the generator has been called. You should be able to access this variable with the function \cc{get\_num\_calls}
<<>>=
r = randu(10)
r$get_num_calls()
r$r()
r$r()
r$get_num_calls()
@

\end{itemize}

<<randu, echo=show>>=
@




\section*{Solutions}

Solutions are contained within the course package
<<eval=FALSE>>=
library("nclRadvanced")
vignette("solutions1", package="nclRadvanced")
@




\end{document}
