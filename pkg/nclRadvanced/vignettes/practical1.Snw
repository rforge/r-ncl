%\VignetteIndexEntry{practical1}
%!Snw weave = knitr
%\VignetteEngine{knitr::knitr}

\documentclass[a4paper,justified,openany]{tufte-handout}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
options(replace.assign=FALSE,width=50)

opts_chunk$set(fig.path='knitr_figure/graphics-', 
               cache.path='knitr_cache/graphics-', 
               fig.align='center', 
               dev='pdf', fig.width=5, fig.height=5, 
               fig.show='hold', cache=FALSE, par=TRUE)
knit_hooks$set(crop=hook_pdfcrop)

knit_hooks$set(par=function(before, options, envir){
    if (before && options$fig.show!='none') {
        par(mar=c(3,3,2,1),cex.lab=.95,cex.axis=.9,
            mgp=c(2,.7,0),tcl=-.01, las=1)
}}, crop=hook_pdfcrop)
@


\usepackage{amsmath}

% Set up the images/graphics package
\usepackage{graphicx}
\setkeys{Gin}{width=\linewidth,totalheight=\textheight,keepaspectratio}
\graphicspath{{graphics/}}

\title{Advanced R: practical 1} 
\author[Dr Colin Gillespie]{Dr Colin Gillespie}
%\date{}  % if the \date{} command is left out, the current date will be used

\usepackage{booktabs}

% The units package provides nice, non-stacked fractions and better spacing
% for units.
\usepackage{units}

% The fancyvrb package lets us customize the formatting of verbatim
% environments.  We use a slightly smaller font.
\usepackage{fancyvrb}
\fvset{fontsize=\normalsize}
\newcommand{\cc}{\texttt}
\graphicspath{{../graphics/}}
\setcounter{secnumdepth}{2}
\usepackage{microtype}
\begin{document}

\maketitle% this prints the handout title, author, and date

\begin{abstract}
  \noindent This practical aims at introducing you to the R interface. By the
  
\end{abstract}




\section{Argument matching}

R has a number of ways that is matches arguments.\sidenote{For example, by position, by complete name, or by partial name.} We didn't cover this in the lecture, so try and figure out the rules from the example below. First we'll create a little function to help our studies

<<>>=
arg_explore = function(arg1, rg2, rg3)
  paste("a1, a2, a3 = ", arg1, rg2, rg3)
@

\noindent Now we'll create a few examples. Try and predict what's going to happen before calling the functions:

<<eval=FALSE >>=
arg_explore(1, 2, 3)
arg_explore(2, 3, arg1 = 1)
arg_explore(2, 3, a = 1)
arg_explore(1, 3, b = 1)
@

\noindent Following the above example, can you predict what will happen with 

<<fig.keep="none">>=
plot(type="l", 1:10, 11:20)
@

\noindent and

<<>>=
rnorm(mean=4, 4, n=5)
@


\section{The \cc{...} argument}

A common argument\sidenote{Especially when dealing with S3 objects and functions.} is \texttt{...}. We can explore what happens using the \cc{eval} and \cc{substitute} functions.

<<>>=
arg_explore2 = function(arg1 = 5, ...) {
  eval(substitute(alist(...)))
}
@

\begin{itemize}
\item What do \cc{alist}, \cc{substitute} and \cc{eval} do?\sidenote{Hint: the easiest way to figure this out is to alter the \cc{arg\_explore2} function.}
\item Repeat the examples used in \cc{arg\_explore}, but include the \cc{...} argument.
\end{itemize}

\section{Variable scope}

Scoping can get tricky. In the examples below, \textbf{before} running the examples, predict what is going to happen
\begin{enumerate}
\item A simple one to get started
<<results='hide'>>=
f = function(x) return(x + 1)
f(10)
@
\item A bit more tricky
<<results='hide'>>=
f = function(x) {
  f = function(x) {
    x + 1
  }
  return(x + 2)
}
f(10)
@
\item Very tricky
<<results='hide'>>=
f = function(x) {
  f = function(x) {
    f = function(x) {
      x + 1
    }
    return(x + 2)
  }
  return(x + 3)
}
f(10)
@
\end{enumerate}


\section{Function closures}

Following the examples in the notes, where we create a function closure for the normal and uniform distributions. Create a similar closure for
\begin{itemize}
\item the  Poisson distribution.
\item and the Geometric distributions.
\end{itemize}

<<echo=FALSE, results="hide">>=
randu = function(seed) {
  state = seed
  calls = 0
  r = function() {
    state <<- (65539*state) %% 2^31
    calls <<- calls + 1
    state/2^31
  }
  set_state = function(initial) state <<- initial
  get_state = function() state
  get_seed = function() seed
  get_num_calls = function() calls
  list(r=r, set_state=set_state, get_state=get_state, 
       get_seed = get_seed, get_num_calls=get_num_calls)
}
r = randu(10)
r$r()
r$get_state()
r$get_seed()
@


\section{Mutable states}

In chapter 2, we created a random number generator where the state, \cc{seed}, was stored between calls. 
\begin{itemize}
\item Code up this generator and make sure that it works as advertised.
\item When we initialise the random number generator, the very first state is called the \cc{seed}. Store this variable and create a new function call \cc{get\_seed} that will return the initial seed, i.e.
<<>>=
r = randu(10)
r$r()
r$get_state()
r$get_seed()
@

\item Create a variable that stores the number of times the generator has been called. You should be able to access this variable with the function \cc{get\_num\_calls}
<<>>=
r = randu(10)
r$get_num_calls()
r$r()
r$r()
r$get_num_calls()
@
\end{itemize}






\section*{Solutions}

Solutions are contained within this package:
<<eval=FALSE>>=
library(nclRadvanced)
vignette("solutions2", package="nclRadvanced")
@




\end{document}
